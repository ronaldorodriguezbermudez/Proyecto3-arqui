import { useNuxtApp, useState } from "#app";
import { watch } from "vue";
import cloneDeep from "lodash-es/cloneDeep";
export const useSnipcart = () => {
  const snipcart = useState("snipcart", () => null);
  const isReady = useState(() => false);
  const store = useState("store", () => null);
  const offStore = useState("offStore", () => ({}));
  const nuxtApp = useNuxtApp();
  const bindProductItemCustom = (bindProductItemCustom2) => {
    const fields = {};
    bindProductItemCustom2.forEach((field, index) => {
      if (typeof field !== "object") {
        throw new TypeError("each bindProductItemCustom field should be an object");
      }
      Object.keys(field).forEach((key) => {
        const fieldKey = `data-item-custom${index + 1}-${key.toString().toLowerCase()}`;
        fields[fieldKey] = field[key];
      });
    });
    return fields;
  };
  const bindProductItem = (product) => {
    const fields = {};
    if (typeof product !== "object") {
      throw new TypeError("Product should be an object");
    }
    Object.keys(product).forEach((key) => {
      fields[`data-item-${key.toString().toLowerCase()}`] = product[key];
    });
    return fields;
  };
  const setCurrency = async (currency) => {
    if (!snipcart.value)
      return console.error("setCurrency - snipcart is not yet ready");
    snipcart.value.api.session.setCurrency(currency);
  };
  const setLanguage = async (lang, _translations = {}) => {
    if (!snipcart.value)
      return console.error("setLanguage - snipcart is not ready");
    const { translations } = nuxtApp.$config.public.snipcart;
    const finalTranslations = {
      ...translations ? translations[lang] : {},
      ..._translations
    };
    snipcart.value.api.session.setLanguage(lang, finalTranslations);
  };
  const load = () => {
    if (process.server)
      throw "can't load snipcart on server side";
    window.LoadSnipcart();
  };
  nuxtApp.hook("app:mounted", () => {
    if (nuxtApp.$config.public.snipcart.subscription) {
      watch(isReady, (newVal, oldVal) => {
        if (oldVal == false && newVal == true) {
          offStore.value = window.Snipcart.store.subscribe(() => {
            const currentValue = window.Snipcart.store.getState();
            const oldStore = cloneDeep(store.value);
            if (oldStore != currentValue) {
              store.value = currentValue;
            }
          });
        }
      });
    }
  });
  return {
    load,
    bindProductItem,
    bindProductItemCustom,
    setCurrency,
    setLanguage,
    snipcart,
    isReady,
    store,
    offStore
  };
};
