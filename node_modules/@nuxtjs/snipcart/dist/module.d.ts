import * as _nuxt_schema from '@nuxt/schema';

interface ValidationErrorItem {
    validation: string
    message: string
    attemptedValue?: any
}

interface ValidationError {
    form: object
    fields: { [key: string]: ValidationErrorItem[]; }
}

interface Address {
    name: string
    company?: string
    address1: string
    address2? : string
    city: string
    country: string
    postalCode: string
    province?: string
    phone?: string
    vatNumber?: string
    errors?: ValidationError
}

interface UpdateCartPayload {
    billingAddress? : Address
    shippingAddress? : Address
    shipToBillingAddress? : boolean
    email?: string
    customFields: string
}


/**
 * @description https://docs.snipcart.com/v3/sdk/reference#core-api-cart-CartAPI
 */
interface CartApi {
    items: Array
    update( payload: UpdateCartPayload ) : Promise
}

/**
 * @description https://docs.snipcart.com/v3/sdk/reference#core-api-customer-CustomerAPI
 */
interface CustomerAPI {
    signin ( email: string, password: string ) : Promise
    signout ( ) : Promise
    register ( email: string, password: string, passwordConfirm: string ) : Promise
    fetchOrders ( limit: number, offset: number ) : Promise
}

interface LocalizationQuery {
    query: string
    context: string 
}

/**
 * @description https://docs.snipcart.com/v3/sdk/reference#core-api-localization-LocalizationAPI
 */
interface LocalizationAPI {
    fetchSuggestedAddresses ( query: LocalizationQuery ) : Promise
}

/**
 * @description https://docs.snipcart.com/v3/sdk/reference#core-api-cart-CartAPI
 */
interface OrdersAPI {
    fetch ( token: string ) : Promise
    token: string
}

/**
 * @description https://docs.snipcart.com/v3/sdk/reference#core-api-session-SessionAPI
*/

interface SessionAPI {
    setLanguage (lang: string, overrides? : Map[string]) : void
    setCurrency (currency: string) : void
}

interface SnipcartAPI {
    cart: CartApi
    orders: OrdersAPI
    customer: CustomerAPI
    localization: LocalizationAPI
    session: SessionAPI
}

interface ReadOnlyStore {
    getState () : S
    subscribe (listener: () => void) : () => void
    listener: () => void
}

interface EventEmitter {
    on ( eventName: string, callback: (payload: T) => void ) : void
    callback: (payload: T) => void
}

interface SnipcartSDK {
    api: SnipcartAPI
    readonly store: ReadOnlyStore
    version: string
    events: EventEmitter
    ready: Promise<void>
}

interface ModuleOptions {
    version: string;
    publicApiKey: string;
    timeoutDuration: number;
    domain: string;
    protocol: string;
    loadCSS: boolean;
    loadStrategy: "" | "on-user-interaction" | "manual";
    addProductBehavior: "" | "none";
    modalStyle: "" | "side";
    language: string;
    templatesUrl: string;
    currency: string;
    subscription: boolean;
    translations: any;
}
declare global {
    interface Window {
        SnipcartSettings: ModuleOptions;
        Snipcart: SnipcartSDK;
        LoadSnipcart: Function;
    }
}
declare const _default: _nuxt_schema.NuxtModule<ModuleOptions>;

export { ModuleOptions, _default as default };
